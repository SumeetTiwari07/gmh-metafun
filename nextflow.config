params {
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 32
    max_time                   = '40.h'
}

manifest {
    name            = 'quadram-institute-bioscience/gmh-metafun'
    author          = 'Andrea Telatin and Sumeet Tiwari'
    homePage        = 'https://github.com/quadram-institute-bioscience/gmh-metafun'
    description     = 'Metagenomic functional profiling'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.6'
}

process {
     
    cpus   = { check_max( 4    * task.attempt, 'cpus'   ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:process_low {
        cpus   = { check_max( 2      * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_filtering {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 96.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 40.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withLabel:humann {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 31.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 72.h  * task.attempt, 'time'    ) }
    }
}

profiles {
 nbi {
    params.uniref           = "/qib/platforms/Informatics/transfer/outgoing/databases/humann_db/uniref/"
    params.chocophlan       = "/qib/platforms/Informatics/transfer/outgoing/databases/humann_db/chocophlan/"
    params.metaphlandb      = "/qib/platforms/Informatics/transfer/outgoing/databases/humann_db/mpa/"
    process.container       = '/qib/platforms/Informatics/transfer/outgoing/singularity/gmh-metafun__1.0.0.simg'
    docker.enabled          = false
    singularity.enabled     = true
    podman.enabled          = false
    shifter.enabled         = false
    charliecloud.enabled    = false
    params.max_memory       = '512.GB'
    params.max_time         = '220.h'
    params.max_cpus         = 32
    process.executor        = 'slurm'
   }

vmqib {
    params.uniref           = "/qib/platforms/Informatics/transfer/outgoing/databases/humann_db/uniref/"
    params.chocophlan       = "/qib/platforms/Informatics/transfer/outgoing/databases/humann_db/chocophlan/"
    params.metaphlandb      = "/qib/platforms/Informatics/transfer/outgoing/databases/humann_db/mpa/"
    process.container       = '/qib/platforms/Informatics/transfer/outgoing/singularity/gmh-metafun__1.0.0.simg'
    docker.enabled          = false
    singularity.enabled     = true
    podman.enabled          = false
    shifter.enabled         = false
    charliecloud.enabled    = false
    params.max_memory       = '200.GB'
    params.max_time         = '220.h'
    params.max_cpus         = 40
    process.executor        = 'local'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}