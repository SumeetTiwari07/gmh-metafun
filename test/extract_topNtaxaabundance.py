#!/usr/bin/env python3

import pandas as pd
import argparse

"""
This script will do the following things:
    1. Extract the species abundance at different taxanomic level.
       Note: The input required for this script should be the combined ouptut generated by the 
             utility script merge_metaphlan_tables.py. The further details can be found here
             https://github.com/biobakery/biobakery/wiki/metaphlan3#merge-outputs
    2. Top N species relative abudnace at Genus/Species taxanomic level will be extracted.
       Note: By default the input file consist of relative abundance at different taxanomic ranks.
"""

def extract_taxa(input,suffix):
    input_file=pd.read_table(input, header=1) #Reading input
    input_file=input_file.drop(columns=["NCBI_tax_id"]) #Droping column "NCBI_tax_id"
    input_file.columns=input_file.columns.str.replace(suffix,'',regex=True) #renaming columnames
    
    #UNKNOWN taxa abundance per sample was extracted
    unknown_taxa=input_file.loc[input_file['clade_name']=="UNKNOWN"]
    unknown_taxa=unknown_taxa.set_index('clade_name') #Set index

    #Count the occurence of "|" in the dataset add it to column name: count
    input_file["count"]=input_file.clade_name.str.count("\|")
    input_file=input_file.set_index('clade_name') #Set index to avoid including strings while colsums
    
    return input_file, unknown_taxa

def create_ranks():
    ranks={
        "G": 5,
        "S": 6,
        "GENUS": 5,
        "SPECIES": 6,
        }
    return ranks

def topN_species_across_samples(taxa_rel,unknown,r,N):
    gs_rel=taxa_rel.loc[taxa_rel['count']==r] #Filter columns
    gs_rel.index=gs_rel.index.str.split('|').str[r].str.split('__').str[1] #Renaming index
    gs_rel=gs_rel.drop(columns=["count"]) #Drop columns
    #gs_rel.to_csv(f'{args.output}_TaxaAbundance.csv')
    gs_rel=gs_rel.assign(total_abundance=lambda x: x.sum(axis=1)) #Column sum
    gs_rel_sort=gs_rel.sort_values(by=['total_abundance'],ascending=False) #Sort the samples in decreasing order
    gs_rel_sort=gs_rel_sort.drop(columns=['total_abundance']) #droppping column   
    topNgs=gs_rel_sort.head(N).T #Top N G/S and transpose the dataframe
    other_gs=pd.concat([gs_rel_sort,unknown],ignore_index=False) #Cocantenating unknown species rel abundance

    #Estimating other species abundance and adding to column 'others'
    #Others include the UNMAPPED taxa too.
    topNgs['Others']=other_gs.iloc[N::].sum(axis=0)
    return topNgs


if __name__=="__main__":
    parser=argparse.ArgumentParser(description=__doc__ , formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-i', '--input', type=str, required=True, help="Combined table from merge_metaphlan_tables.py *_profile.txt >$FILENAME_profile.tsv")
    parser.add_argument('-s', '--suffix', type=str, default="_metaphlan_bugs_list", help="Suffix to trim from the sample names (default: %(default)s)")
    parser.add_argument('-o', '--output', type=str, required=True, help="Output file")
    parser.add_argument('-r', '--rank',  type=str, choices=['G','S'], required=True, help="Select taxanomic rank. G -> genus, S -> species")
    parser.add_argument('-m', '--metadata', type=str, help="Metadata about the samples in csv format with colum name: 'SampleId' containing the sample names")
    parser.add_argument('-t', '--topN', default=20, type=int, help="top N genefamilies (default %(default)s)")
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    args = parser.parse_args()

    #Extracting taxa abundance and unknown taxa abundance. All the values are in relative abundance
    taxa_abundance,unknown=extract_taxa(args.input,args.suffix)

    #Creating rank dictionary
    ranks_lvl=create_ranks()
    r=ranks_lvl[args.rank.upper()]

    #Estimating topN Gene families in the whole experiment and their abundance across the samples.
    topNgs_rel=topN_species_across_samples(taxa_abundance,unknown,r,args.topN)

    #Adding metadata of the samples if provided.
    if args.metadata:
        metadata=pd.read_csv(args.metadata,header=0,index_col="SampleId")
        topNgs_rel_meta=pd.concat([metadata,topNgs_rel],axis=1,join="inner")
        topNgs_rel_meta.to_csv(f'{args.output}-rel.csv')

    else:
        #Write absoulute and relative abundance.
        topNgs_rel.to_csv(f'{args.output}-rel.csv')
